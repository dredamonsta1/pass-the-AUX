# frontend/Dockerfile.frontend
# Stage 1: Build the React application
FROM node:18-alpine as build

WORKDIR /app

# Set NODE_ENV to development during build to ensure devDependencies are installed
ENV NODE_ENV=development

# Copy package.json and package-lock.json first to leverage Docker cache
# IMPORTANT: Adjust path here. 'frontend/' is relative to the docker-compose.yml context.
COPY frontend/package*.json ./

RUN npm install

# Copy the rest of your frontend application code from the frontend/ directory.
# IMPORTANT: Adjust path here. 'frontend/' is relative to the docker-compose.yml context.
COPY frontend/. .

# Build the React app for production
# This command must successfully create the build output directory (usually 'dist' for Vite) at /app/dist
RUN npm run build

# Stage 2: Serve the built React application with a lightweight web server (e.g., Nginx)
FROM nginx:alpine

# Optionally reset NODE_ENV to production for the final image, as it's for serving
ENV NODE_ENV=production

# Copy the built React app from the build stage into Nginx's static file directory
# Vite typically outputs to 'dist', so we copy from /app/dist
COPY --from=build /app/dist /usr/share/nginx/html

# Expose the port Nginx will listen on
EXPOSE 80

# Command to start Nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]
